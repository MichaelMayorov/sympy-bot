#! /usr/bin/env python

import json
from urllib2 import urlopen
import sys
from optparse import OptionParser
from tempfile import mkdtemp
import subprocess
import os
from os.path import expandvars
import urllib2
import base64
from urllib import urlencode
from getpass import getpass

class CmdException(Exception):
    pass

def main():
    parser = OptionParser(usage="""\
[options] [commands]

Commands:

  review NNN            Reviews the pull request NNN
  list                  Lists all open pull requests""")
    parser.add_option("--upload",
            action="store_true", dest="upload",
            default=False, help="Uploads the results into the pull request")
    options, args = parser.parse_args()
    if len(args) == 1:
        arg, = args
        if arg == "list":
            list_pull_requests()
            return
        print "Unknown command"
        sys.exit(1)
    elif len(args) == 2:
        arg1, arg2 = args
        if arg1 == "review":
            review(int(arg2), upload=options.upload)
            return
        print "Unknown command"
        sys.exit(1)
    elif len(args) == 0:
        pass
    else:
        print "Too many arguments"
        sys.exit(1)
    parser.print_help()

def cmd(s, capture=False, ok_exit_code_list=None):
    """
    Executes the command "s".

    It raises an exception if the command fails to run.

    capture ... If True, it captures its output and returns it as a string.
    ok_exit_code_list ... a list of ok exit codes (otherwise cmd() raises an
    exception)
    """
    if ok_exit_code_list is None:
        ok_exit_code_list = [0]
    s = expandvars(s)
    if capture:
        p = subprocess.Popen(s, shell=True, stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT)
        output = p.communicate()[0]
        r = p.returncode
    else:
        output = None
        r = os.system(s)
    if r not in ok_exit_code_list:
        raise CmdException("Command '%s' failed with err=%d." % (s, r))
    return output

def github_get_pull_request_all():
    """
    Returns all github pull requests.
    """
    return json.load(urlopen('http://github.com/api/v2/json/pulls/sympy/sympy'))

def github_get_pull_request(n):
    """
    Returns pull request 'n'.
    """
    url = 'http://github.com/api/v2/json/pulls/sympy/sympy/%d'
    data = json.load(urlopen(url % n))
    return data["pull"]

def github_check_authentication(username, password):
    """
    Checks that username & password is valid.
    """
    request = urllib2.Request("https://github.com/api/v2/json/user/show/%s" % \
            username)
    base64string = base64.encodestring('%s:%s' % (username, password)).replace('\n', '')
    request.add_header("Authorization", "Basic %s" % base64string)
    s = json.load(urllib2.urlopen(request))
    if not ("user" in s and "plan" in s["user"]):
        raise Exception("Invalid username or password")

def github_add_comment_to_pull_request(n, comment, username, password):
    """
    Adds a 'comment' to the pull request 'n'.

    Currently it needs github username and password (as strings).
    """
    request = urllib2.Request("https://github.com/api/v2/json/issues/comment/sympy/sympy/%d" % n, data=urlencode([("comment", comment)]))
    base64string = base64.encodestring('%s:%s' % (username, password)).replace('\n', '')
    request.add_header("Authorization", "Basic %s" % base64string)
    s = json.load(urllib2.urlopen(request))
    assert s["comment"]["body"] == comment


def list_pull_requests():
    p = github_get_pull_request_all()
    for pull in p['pulls']:
        n = pull['number']
        repo = pull['head']['repository']['url']
        branch = pull['head']['ref']
        print "#%03d: %s %s" % (n, repo, branch)

def formulate_review(report_url):
    s = """\
Test results: %(url)s

Automatic review by [sympy-bot](https://github.com/sympy/sympy-bot).""" % \
        {"url": report_url}
    return s

def review(n, upload=False):
    print """Enter your github username & password (it will be kept as a Python
variable as long as sympy-bot is running and sent over https to authenticate
with github, otherwise not saved anywhere else):"""
    username = raw_input("Username: ")
    password = getpass("Password: ")
    print "> Checking username and password..."
    github_check_authentication(username, password)
    print ">     OK."
    tmpdir = mkdtemp()
    print "> Working directory: %s" % tmpdir
    pull = github_get_pull_request(n)
    assert pull['number'] == n
    print "> Reviewing pull request #%d" % n
    repo = pull['head']['repository']['url']
    branch = pull['head']['ref']
    user = pull["user"]
    print "> Pull request info:"
    print '>     Author: "%s" <%s>' % (user["name"], user["email"])
    print ">     Repository: %s" % repo
    print ">     Branch: %s" % branch

    open("%s/branches" % tmpdir, "w").write(
        "https://github.com/sympy/sympy.git master\n%s %s" % (repo, branch))
    print "> Cloning sympy/sympy master"
    cmd("cd %s; git clone https://github.com/sympy/sympy.git" % tmpdir)
    print "> Running sympy-next"
    cmd("cp other/sympy-next.py %s/" % tmpdir)
    cmd("cd %s; ./sympy-next.py sympy branches out" % tmpdir)
    print "Done."
    print
    print "View report at: %s/out/report.html" % tmpdir
    print "> Uploading test results"
    s = cmd("other/pastebin.py %s/out/2* -n sympy-bot --public -e N" % \
            tmpdir, capture=True)
    url = s.split()[-1]
    print "> Uploaded at: %s" % url
    review = formulate_review(url)
    print "> Review:"
    print review
    print "> Uploading the review to the github pull request"
    github_add_comment_to_pull_request(n, review, username, password)
    print ">     Done."

if __name__ == "__main__":
    main()
